(()=>{var e={598:(e,r,t)=>{"use strict";t.d(r,{Z:()=>i});var n=t(537),o=t.n(n),s=t(645),a=t.n(s)()(o());a.push([e.id,'*,*:before,*:after{box-sizing:border-box}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:"";content:none}table{border-collapse:collapse;border-spacing:0}button,input,select,option{padding:0;border:none;background-color:inherit;color:inherit;font-family:inherit;font-size:inherit;text-align:left}button{cursor:pointer}:root{--color-bg: #2b2d42ff;--color-primary: #fffbffff;--color-cell-border: #177e89ff;--color-ship: #070707;--color-cell-attacked: #177e89ff;--color-cell-sunk-ship: darkgreen;--color-cell-attacked-ship: #9b1d20ff;--color-btn: #9b1d20ff;--space-cadet: #2b2d42ff;--ruby-red: #9b1d20ff;--metallic-seaweed: #177e89ff;--snow: #fffbffff;--hookers-green: #496f5dff;--olive-dart: #423B0B;--font: sans-serif}body{font-family:var(--font);font-size:16px;color:var(--color-primary);background-color:var(--color-bg)}option{color:#000}.header{padding:1rem;border-bottom:2px solid var(--color-primary)}.header__title{text-align:center;font-size:1.5rem;font-weight:500}.board{display:grid;grid-template-columns:repeat(10, 1fr);grid-template-rows:repeat(10, 1fr);width:80vw;height:80vw;max-width:20rem;max-height:20rem;margin-bottom:1.5rem}.btn{display:block;width:fit-content;padding:.3rem .5rem;border-radius:5px;border:1px solid var(--color-cell-border)}.btn--large{padding:.5rem .75rem;margin:2rem auto;font-size:1.2rem}.board__cell{margin:15%;border:1px solid var(--color-cell-border)}.board__cell--ship{background-color:var(--color-ship)}.board__cell--attacked{background-color:var(--color-cell-attacked)}.board__cell--attacked-ship{background-color:var(--color-cell-attacked-ship)}.board__cell--sunk-ship{background-color:var(--color-cell-sunk-ship)}.ships-wrapper{width:fit-content}.ship{display:block;height:1.5rem;margin-bottom:1rem;background:var(--color-ship)}.ship--selected{background:var(--color-cell-border)}.ship--carrier{width:7.5rem}.ship--battleship{width:6rem}.ship--cruiser{width:4.5rem}.ship--destroyer{width:3rem}.ships-section{display:flex;flex-direction:column}.ships-btns{margin:1rem 0 0 0;display:flex;flex-direction:column;gap:.75rem}.ship-orientation-wrapper{display:flex;align-items:center;gap:1rem}.section{width:fit-content;margin:0 auto;padding:2rem}.section--hidden{display:none}.section__message{font-size:1.2rem;font-weight:500;text-align:center;padding:.2rem .5rem}@media screen and (min-width: 50rem){.flex-wrapper{display:flex;gap:2rem}}',"",{version:3,sources:["webpack://./src/scss/base/_reset.scss","webpack://./src/scss/base/_variables.scss","webpack://./src/scss/base/_base.scss","webpack://./src/scss/components/_header.scss","webpack://./src/scss/components/_board.scss","webpack://./src/scss/components/_btn.scss","webpack://./src/scss/components/_board-cell.scss","webpack://./src/scss/components/_ship.scss","webpack://./src/scss/components/_section.scss","webpack://./src/scss/_utilities.scss"],names:[],mappings:"AAAA,mBACI,qBAAA,CAGJ,2ZACI,QAAA,CACA,SAAA,CACA,QAAA,CACA,cAAA,CACA,YAAA,CACA,uBAAA,CAGJ,8EACI,aAAA,CAGJ,KACI,aAAA,CAGJ,MACI,eAAA,CAGJ,aACI,WAAA,CAGJ,oDACI,UAAA,CACA,YAAA,CAGJ,MACI,wBAAA,CACA,gBAAA,CAGJ,2BACI,SAAA,CACA,WAAA,CACA,wBAAA,CACA,aAAA,CACA,mBAAA,CACA,iBAAA,CACA,eAAA,CAGJ,OACI,cAAA,CClDJ,MACE,qBAAA,CACA,0BAAA,CACA,8BAAA,CACA,qBAAA,CACA,gCAAA,CACA,iCAAA,CACA,qCAAA,CACA,sBAAA,CAEA,wBAAA,CACA,qBAAA,CACA,6BAAA,CACA,iBAAA,CACA,0BAAA,CACA,qBAAA,CAEA,kBAAA,CCjBF,KACE,uBAAA,CACA,cAAA,CACA,0BAAA,CACA,gCAAA,CAGF,OACE,UAAA,CCRF,QACE,YAAA,CACA,4CAAA,CAEA,eACE,iBAAA,CACA,gBAAA,CACA,eAAA,CCPJ,OACE,YAAA,CACA,qCAAA,CACA,kCAAA,CACA,UAAA,CACA,WAAA,CACA,eAAA,CACA,gBAAA,CACA,oBAAA,CCRF,KACE,aAAA,CACA,iBAAA,CACA,mBAAA,CACA,iBAAA,CACA,yCAAA,CAEA,YACE,oBAAA,CACA,gBAAA,CACA,gBAAA,CCVJ,aACE,UAAA,CACA,yCAAA,CAEA,mBACE,kCAAA,CAGF,uBACE,2CAAA,CAGF,4BACE,gDAAA,CAGF,wBACE,4CAAA,CCfJ,eACE,iBAAA,CAGF,MACE,aAAA,CACA,aARiB,CASjB,kBAAA,CACA,4BAAA,CAEA,gBACE,mCAAA,CAGF,eACE,YAAA,CAGF,kBACE,UAAA,CAGF,eACE,YAAA,CAGF,iBACE,UAAA,CAIJ,eACE,YAAA,CACA,qBAAA,CAGF,YACE,iBAAA,CACA,YAAA,CACA,qBAAA,CACA,UAAA,CAGF,0BACE,YAAA,CACA,kBAAA,CACA,QAAA,CChDF,SACE,iBAAA,CACA,aAAA,CACA,YAAA,CAEA,iBACE,YAAA,CAGF,kBACE,gBAAA,CACA,eAAA,CACA,iBAAA,CACA,mBAAA,CCbJ,qCACC,cACG,YAAA,CACA,QAAA,CAAA",sourcesContent:["*, *:before, *:after {\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {\r\n    margin: 0;\r\n    padding: 0;\r\n    border: 0;\r\n    font-size: 100%;\r\n    font: inherit;\r\n    vertical-align: baseline;\r\n}\r\n\r\narticle, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {\r\n    display: block;\r\n}\r\n\r\nbody {\r\n    line-height: 1;\r\n}\r\n\r\nol, ul {\r\n    list-style: none;\r\n}\r\n\r\nblockquote, q {\r\n    quotes: none;\r\n}\r\n\r\nblockquote:before, blockquote:after, q:before, q:after {\r\n    content: '';\r\n    content: none;\r\n}\r\n\r\ntable {\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n}\r\n\r\nbutton, input, select, option {\r\n    padding: 0;\r\n    border: none;\r\n    background-color: inherit;\r\n    color: inherit;\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n    text-align: left;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}",":root {\r\n  --color-bg: #2b2d42ff;\r\n  --color-primary: #fffbffff;\r\n  --color-cell-border: #177e89ff;\r\n  --color-ship: #070707;\r\n  --color-cell-attacked: #177e89ff;\r\n  --color-cell-sunk-ship: darkgreen;\r\n  --color-cell-attacked-ship: #9b1d20ff;\r\n  --color-btn: #9b1d20ff;\r\n\r\n  --space-cadet: #2b2d42ff;\r\n  --ruby-red: #9b1d20ff;\r\n  --metallic-seaweed: #177e89ff;\r\n  --snow: #fffbffff;\r\n  --hookers-green: #496f5dff;\r\n  --olive-dart: #423B0B;\r\n\r\n  --font: sans-serif;\r\n}","body {\r\n  font-family: var(--font);\r\n  font-size: 16px;\r\n  color: var(--color-primary);\r\n  background-color: var(--color-bg);\r\n}\r\n\r\noption {\r\n  color: black;\r\n}",".header {\r\n  padding: 1rem;\r\n  border-bottom: 2px solid var(--color-primary);\r\n\r\n  &__title {\r\n    text-align: center;\r\n    font-size: 1.5rem;\r\n    font-weight: 500;\r\n  }\r\n}",".board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  grid-template-rows: repeat(10, 1fr);\r\n  width: 80vw;\r\n  height: 80vw;\r\n  max-width: 20rem;\r\n  max-height: 20rem;\r\n  margin-bottom: 1.5rem;\r\n}",".btn {\r\n  display: block;\r\n  width: fit-content;\r\n  padding: .3rem .5rem;\r\n  border-radius: 5px;\r\n  border: 1px solid var(--color-cell-border);\r\n\r\n  &--large {\r\n    padding: .5rem .75rem;\r\n    margin: 2rem auto;\r\n    font-size: 1.2rem;\r\n  }\r\n}",".board__cell {\r\n  margin: 15%;\r\n  border: 1px solid var(--color-cell-border);\r\n\r\n  &--ship {\r\n    background-color: var(--color-ship);\r\n  }\r\n\r\n  &--attacked {\r\n    background-color: var(--color-cell-attacked);\r\n  }\r\n\r\n  &--attacked-ship {\r\n    background-color: var(--color-cell-attacked-ship);\r\n  }\r\n\r\n  &--sunk-ship {\r\n    background-color: var(--color-cell-sunk-ship);\r\n  }\r\n}","$base-ship-length: 1.5rem;\r\n\r\n.ships-wrapper {\r\n  width: fit-content;\r\n}\r\n\r\n.ship {\r\n  display: block;\r\n  height: $base-ship-length;\r\n  margin-bottom: 1rem;\r\n  background: var(--color-ship);\r\n\r\n  &--selected {\r\n    background: var(--color-cell-border);\r\n  }\r\n\r\n  &--carrier {\r\n    width: $base-ship-length * 5;\r\n  }\r\n\r\n  &--battleship {\r\n    width: $base-ship-length * 4;\r\n  }\r\n\r\n  &--cruiser {\r\n    width: $base-ship-length * 3;\r\n  }\r\n\r\n  &--destroyer {\r\n    width: $base-ship-length * 2;\r\n  }\r\n}\r\n\r\n.ships-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.ships-btns {\r\n  margin: 1rem 0 0 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: .75rem;\r\n}\r\n\r\n.ship-orientation-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1rem;\r\n}",".section {\r\n  width: fit-content;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n\r\n  &--hidden {\r\n    display: none;\r\n  }\r\n  \r\n  &__message {\r\n    font-size: 1.2rem;\r\n    font-weight: 500;\r\n    text-align: center;\r\n    padding: .2rem .5rem;\r\n  }\r\n}","@media screen and (min-width: 50rem) {\r\n .flex-wrapper {\r\n    display: flex;\r\n    gap: 2rem;\r\n  } \r\n}"],sourceRoot:""}]);const i=a},645:e=>{"use strict";e.exports=function(e){var r=[];return r.toString=function(){return this.map((function(r){var t="",n=void 0!==r[5];return r[4]&&(t+="@supports (".concat(r[4],") {")),r[2]&&(t+="@media ".concat(r[2]," {")),n&&(t+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),t+=e(r),n&&(t+="}"),r[2]&&(t+="}"),r[4]&&(t+="}"),t})).join("")},r.i=function(e,t,n,o,s){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(n)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var A=[].concat(e[l]);n&&a[A[0]]||(void 0!==s&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=s),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),r.push(A))}},r}},537:e=>{"use strict";e.exports=function(e){var r=e[1],t=e[3];if(!t)return r;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),s="/*# ".concat(o," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[r].concat(a).concat([s]).join("\n")}return[r].join("\n")}},798:function(e,r,t){e=t.nmd(e),function(t,n){"use strict";var o={};t.PubSub?(o=t.PubSub,console.warn("PubSub already loaded, using existing version")):(t.PubSub=o,function(e){var r={},t=-1;function n(e,r,t){try{e(r,t)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function o(e,r,t){e(r,t)}function s(e,t,s,a){var i,c=r[t],l=a?o:n;if(Object.prototype.hasOwnProperty.call(r,t))for(i in c)Object.prototype.hasOwnProperty.call(c,i)&&l(c[i],e,s)}function a(e){var t=String(e);return Boolean(Object.prototype.hasOwnProperty.call(r,t)&&function(e){var r;for(r in e)if(Object.prototype.hasOwnProperty.call(e,r))return!0;return!1}(r[t]))}function i(e,r,t,n){var o=function(e,r,t){return function(){var n=String(e),o=n.lastIndexOf(".");for(s(e,e,r,t);-1!==o;)o=(n=n.substr(0,o)).lastIndexOf("."),s(e,n,r,t);s(e,"*",r,t)}}(e="symbol"==typeof e?e.toString():e,r,n);return!!function(e){for(var r=String(e),t=a(r)||a("*"),n=r.lastIndexOf(".");!t&&-1!==n;)n=(r=r.substr(0,n)).lastIndexOf("."),t=a(r);return t}(e)&&(!0===t?o():setTimeout(o,0),!0)}e.publish=function(r,t){return i(r,t,!1,e.immediateExceptions)},e.publishSync=function(r,t){return i(r,t,!0,e.immediateExceptions)},e.subscribe=function(e,n){if("function"!=typeof n)return!1;e="symbol"==typeof e?e.toString():e,Object.prototype.hasOwnProperty.call(r,e)||(r[e]={});var o="uid_"+String(++t);return r[e][o]=n,o},e.subscribeAll=function(r){return e.subscribe("*",r)},e.subscribeOnce=function(r,t){var n=e.subscribe(r,(function(){e.unsubscribe(n),t.apply(this,arguments)}));return e},e.clearAllSubscriptions=function(){r={}},e.clearSubscriptions=function(e){var t;for(t in r)Object.prototype.hasOwnProperty.call(r,t)&&0===t.indexOf(e)&&delete r[t]},e.countSubscriptions=function(e){var t,n,o=0;for(t in r)if(Object.prototype.hasOwnProperty.call(r,t)&&0===t.indexOf(e)){for(n in r[t])o++;break}return o},e.getSubscriptions=function(e){var t,n=[];for(t in r)Object.prototype.hasOwnProperty.call(r,t)&&0===t.indexOf(e)&&n.push(t);return n},e.unsubscribe=function(t){var n,o,s,a="string"==typeof t&&(Object.prototype.hasOwnProperty.call(r,t)||function(e){var t;for(t in r)if(Object.prototype.hasOwnProperty.call(r,t)&&0===t.indexOf(e))return!0;return!1}(t)),i=!a&&"string"==typeof t,c="function"==typeof t,l=!1;if(!a){for(n in r)if(Object.prototype.hasOwnProperty.call(r,n)){if(o=r[n],i&&o[t]){delete o[t],l=t;break}if(c)for(s in o)Object.prototype.hasOwnProperty.call(o,s)&&o[s]===t&&(delete o[s],l=!0)}return l}e.clearSubscriptions(t)}}(o)),void 0!==e&&e.exports&&(r=e.exports=o),r.PubSub=o,e.exports=r=o}("object"==typeof window&&window||this)},379:e=>{"use strict";var r=[];function t(e){for(var t=-1,n=0;n<r.length;n++)if(r[n].identifier===e){t=n;break}return t}function n(e,n){for(var s={},a=[],i=0;i<e.length;i++){var c=e[i],l=n.base?c[0]+n.base:c[0],A=s[l]||0,d="".concat(l," ").concat(A);s[l]=A+1;var p=t(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)r[p].references++,r[p].updater(u);else{var h=o(u,n);n.byIndex=i,r.splice(i,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function o(e,r){var t=r.domAPI(r);return t.update(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap&&r.supports===e.supports&&r.layer===e.layer)return;t.update(e=r)}else t.remove()}}e.exports=function(e,o){var s=n(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<s.length;a++){var i=t(s[a]);r[i].references--}for(var c=n(e,o),l=0;l<s.length;l++){var A=t(s[l]);0===r[A].references&&(r[A].updater(),r.splice(A,1))}s=c}}},569:e=>{"use strict";var r={};e.exports=function(e,t){var n=function(e){if(void 0===r[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}r[e]=t}return r[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var r=document.createElement("style");return e.setAttributes(r,e.attributes),e.insert(r,e.options),r}},565:(e,r,t)=>{"use strict";e.exports=function(e){var r=t.nc;r&&e.setAttribute("nonce",r)}},795:e=>{"use strict";e.exports=function(e){var r=e.insertStyleElement(e);return{update:function(t){!function(e,r,t){var n="";t.supports&&(n+="@supports (".concat(t.supports,") {")),t.media&&(n+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(n+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),n+=t.css,o&&(n+="}"),t.media&&(n+="}"),t.supports&&(n+="}");var s=t.sourceMap;s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),r.styleTagTransform(n,e,r.options)}(r,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)}}}},589:e=>{"use strict";e.exports=function(e,r){if(r.styleSheet)r.styleSheet.cssText=e;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(e))}}}},r={};function t(n){var o=r[n];if(void 0!==o)return o.exports;var s=r[n]={id:n,loaded:!1,exports:{}};return e[n].call(s.exports,s,s.exports,t),s.loaded=!0,s.exports}t.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return t.d(r,{a:r}),r},t.d=(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e=t(379),r=t.n(e),n=t(795),o=t.n(n),s=t(569),a=t.n(s),i=t(565),c=t.n(i),l=t(216),A=t.n(l),d=t(589),p=t.n(d),u=t(598),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=A(),r()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;var b=t(798),f=t.n(b);const m={NEXT_TURN:"next turn",UPDATE_UI:"update ui",MOVE_INPUT:"move input",PLAYER_MOVE:"player move",UPDATE_BOARD:"update board",GAME_START:"game start",GAME_END:"game end",NEW_GAME:"new game"};Object.freeze(m);const C=m,g=e=>e[Math.floor(Math.random()*e.length)],y=({ships:e=[],width:r=10,height:t=10}={})=>{const n=e=>e.reduce(((e,r)=>e.concat(r.positions)),[]),o=e=>{const r={};return!e.every((e=>!r[e]&&(r[e]=!0,!0)))},s=([e,n])=>n<r&&e<t&&n>=0&&e>=0,a=e=>!e.every(s),i=e=>{const r=n(e);return!(a(r)||o(r))};(()=>{if(!i(e))throw new Error("Invalid ship placements")})();const c=[],l=([e,r])=>c.some((t=>t[0]===e&&t[1]===r)),A=([e,r])=>s([e,r])&&!l([e,r]);let d=[];const p=()=>e.filter((e=>e.isSunk())),u=Object.freeze((()=>{const e=[];for(let n=0;n<t;n+=1)for(let t=0;t<r;t+=1)e.push([n,t]);return e})()),h={ships:e,width:r,height:t,allIndices:u,attackedPositions:c,attackedShipsPositions:d,isAttackValid:A,receiveAttack:([r,t])=>{if(!A([r,t]))throw new Error("Invalid Attack");c.push([r,t]);const n=e.filter((e=>e.isPos([r,t])))[0];return!!n&&(n.receiveAttack([r,t]),d.push([r,t]),!0)},hasPosBeenAttacked:l,isAllPositionsAttacked:()=>c.length===u.length,sunkShips:p,isAllShipsSunk:()=>p().length===e.length,addShip:r=>{const t=n([...e,r]);return!o(t)&&!a(t)&&(e.push(r),!0)},canShipBeAdded:r=>{const t=[...e,r];return i(t)},forOpponent:()=>{const{ships:e,receiveAttack:r,addShip:t,...n}=h;return n.ships=[],n}};return h},v=({startPos:e=[0,0],length:r=1,orientation:t=[0,1]}={})=>{const n=(()=>{const n=[e];for(let e=1;e<r;e+=1){const[r,o]=n[e-1],s=[t[0]+r,t[1]+o];n[e]=s}return n})(),o=[],s=e=>n.some((r=>r[0]===e[0]&&r[1]===e[1]));return{startPos:e,length:r,orientation:t,positions:n,attackedPositions:o,receiveAttack:e=>!!s(e)&&(o.push(e),!0),isPos:s,isSunk:()=>o.length===n.length}},k=()=>[5,4,3,3,2].map((e=>v({length:e}))),E=e=>{const r=([e,r])=>{const n=`[data-pos="${e}${r}"]`;return t.querySelector(n)},t=document.createElement("div");return t.className="board",e.allIndices.forEach((([r,n])=>{const o=document.createElement("button");o.id=`cell${r}${n}`,((e,r,t)=>{e.classList.add("board__cell"),r.hasPosBeenAttacked(t)&&e.classList.add("board__cell--attacked"),((e,r)=>e.ships.some((e=>e.isPos(r))))(r,t)&&e.classList.add("board__cell--ship"),((e,[r,t])=>e.attackedShipsPositions.some((e=>e[0]===r&&e[1]===t)))(r,t)&&e.classList.add("board__cell--attacked-ship"),((e,r)=>e.sunkShips().some((e=>e.isPos(r))))(r,t)&&e.classList.add("board__cell--sunk-ship")})(o,e,[r,n]),o.dataset.pos=`${r}${n}`,t.appendChild(o)})),f().subscribe(C.UPDATE_BOARD,((n,o)=>{o===t&&(e.attackedPositions.forEach((e=>{r(e).classList.add("board__cell--attacked")})),e.ships.reduce(((e,r)=>e.concat(r.positions)),[]).forEach((e=>{r(e).classList.add("board__cell--ship")})),e.sunkShips().reduce(((e,r)=>e.concat(r.positions)),[]).forEach((e=>{r(e).classList.add("board__cell--sunk-ship")})),e.attackedShipsPositions.forEach((e=>{r(e).classList.add("board__cell--attacked-ship")})))})),t},B=()=>{const e=[[0,1],[0,-1],[1,0],[-1,0]],r=r=>{const o=g(n);n=n.filter((e=>e!==o));const s=((r,n)=>{const o=e.map((e=>v({startPos:r,length:n,orientation:e}))).filter((e=>t.canShipBeAdded(e)));return g(o)})(o,r);return!!s&&(t.addShip(s),!0)},t=y();let n=t.allIndices.map((([e,r])=>[e,r]));return[5,4,3,3,2].forEach((e=>{let t=!1;for(;!t;)t=r(e)})),t},w=[0,1],_=[1,0],x=e=>{const r={5:"ship--carrier",4:"ship--battleship",3:"ship--cruiser",2:"ship--destroyer"};return e.map((e=>{const t=document.createElement("button"),n=r[e.length];return t.classList.add("ship"),t.classList.add(n),t.dataset.length=e.length,t}))},O=({ships:e=[]}={})=>{let r=!1;const t={board:y({ships:e})};return f().subscribe(C.NEXT_TURN,((e,{player:n})=>{n===t&&(r=!0)})),f().subscribe(C.MOVE_INPUT,((e,{pos:n})=>{r&&(f().publish(C.PLAYER_MOVE,{player:t,pos:n}),r=!1)})),t},P=()=>{const e={board:B()};return f().subscribe(C.NEXT_TURN,((r,{player:t,board:n})=>{if(t!==e)return;const o=(e=>{const r=e.allIndices.filter((([r,t])=>!e.attackedPositions.some((e=>e[0]===r&&e[1]===t))));return g(r)})(n);f().publish(C.PLAYER_MOVE,{player:e,pos:o})})),e};(()=>{const e=e=>{if(null===s)return;const r=document.querySelector(".ship--selected");let t=e.target.dataset.pos;t=t.split("").map((e=>Number(e)));const n=v({startPos:t,orientation:o,length:s});a.canShipBeAdded(n)&&(a.addShip(n),r.remove(),s=null,f().publish(C.UPDATE_BOARD,c.board)),e.stopPropagation()},r=()=>{a=y();const r=k();c.ships=x(r),c.board=E(a),c.board.addEventListener("click",e),c.ships.forEach((e=>e.addEventListener("click",t))),n()},t=e=>{s=Number(e.target.dataset.length),c.ships.forEach((e=>e.classList.remove("ship--selected"))),e.target.classList.add("ship--selected")},n=()=>{c.boardWrapper.replaceChildren(c.board),c.shipsWrapper.replaceChildren(),c.ships.forEach((e=>c.shipsWrapper.appendChild(e)))};let o=w,s=null,a=y();const i=k(),c={parent:document.getElementById("start"),boardWrapper:document.getElementById("board-wrapper"),shipsWrapper:document.getElementById("ships-wrapper"),startBtn:document.getElementById("start-btn"),orientationSelect:document.getElementById("ship-orientation"),randomShipsBtn:document.getElementById("random-ships"),resetBtn:document.getElementById("reset-ships"),board:E(a),ships:x(i)};n(),c.board.addEventListener("click",e),c.ships.forEach((e=>e.addEventListener("click",t))),c.startBtn.addEventListener("click",(()=>{5===a.ships.length&&(c.parent.classList.toggle("section--hidden"),f().publish(C.GAME_START,{ships:a.ships}),r())})),c.orientationSelect.addEventListener("change",(e=>{switch(e.target.value){case"0":default:o=w;break;case"1":o=_}})),c.randomShipsBtn.addEventListener("click",(()=>{c.shipsWrapper.replaceChildren(),c.ships=[],a=B(),c.board=E(a),c.boardWrapper.replaceChildren(c.board)})),c.resetBtn.addEventListener("click",r),f().subscribe(C.NEW_GAME,(()=>{c.parent.classList.toggle("section--hidden")}))})(),(()=>{const e=e=>{let{pos:r}=e.target.dataset;r=r.split("").map((e=>Number(e))),f().publish(C.MOVE_INPUT,{pos:r}),e.stopPropagation()},r=(e,{winner:r})=>{let t="Game over, ";r===o.player?t+="You win":t+="You lost",n.message.textContent=t},t=(e,{player:r})=>{r===o.player?f().publish(C.UPDATE_BOARD,n.playerBoard):f().publish(C.UPDATE_BOARD,n.computerBoard)},n={parent:document.getElementById("game"),message:document.getElementById("game-message"),playerBoardWrapper:document.getElementById("player-board"),computerBoardWrapper:document.getElementById("computer-board"),newGameBtn:document.getElementById("new-game")};n.newGameBtn.addEventListener("click",(()=>{o=null,n.playerBoard=null,n.computerBoard=null,n.playerBoardWrapper.replaceChildren(),n.computerBoardWrapper.replaceChildren(),n.message.textContent="",n.parent.classList.toggle("section--hidden"),f().publish(C.NEW_GAME)}));let o=null;f().subscribe(C.GAME_START,((s,{ships:a})=>{o={player:O({ships:a}),computer:P()},n.playerBoard=E(o.player.board),n.computerBoard=E(o.computer.board.forOpponent()),[...n.computerBoard.children].forEach((r=>r.addEventListener("click",e))),n.playerBoardWrapper.appendChild(n.playerBoard),n.computerBoardWrapper.appendChild(n.computerBoard),f().subscribe(C.UPDATE_UI,t),f().subscribe(C.GAME_END,r);const i=(e=>{const r=()=>(t+1)%e.length;let t=0;const n=f().subscribe(C.PLAYER_MOVE,((o,{player:s,pos:a})=>{const i=e[t],c=e[r()];if(s===i&&((e,r)=>e.board.isAttackValid(r))(c,a)&&(c.board.receiveAttack(a),t=r()),f().publish(C.UPDATE_UI,{player:c}),(()=>{const r=e[t];return r.board.isAllShipsSunk()||r.board.isAllPositionsAttacked()})())(r=>{f().unsubscribe(n),f().publish(C.GAME_END,{players:e,winner:r})})(i);else{const r=e[t],n=s.board.forOpponent();f().publish(C.NEXT_TURN,{player:r,board:n})}}));return{start:()=>{const n=e[t],o=e[r()].board.forOpponent();f().publish(C.UPDATE_UI,{players:e}),f().publish(C.NEXT_TURN,{player:n,board:o})}}})(Object.values(o));n.parent.classList.toggle("section--hidden"),i.start()}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,